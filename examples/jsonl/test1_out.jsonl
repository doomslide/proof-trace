{"syntheticName":"add_assoc_example_goal_goal_12739406252616973674","sourceDecl":"add_assoc_example","proof":"Eq.refl (a + (b + c))","primitives":{"primitives":[{"value":"fun α => α","type":"Sort u → Sort u","name":"outParam","kind":"definition"},{"value":"fun {α} [Add α] => { hAdd := fun a b => Add.add a b }","type":"{α : Type u_1} → [Add α] → HAdd α α α","name":"instHAdd","kind":"definition"},{"type":"Sort u → Sort v → Sort (max (max 1 u) v)","name":"PProd","kind":"inductive","ctors":[{"type":"{α : Sort u} → {β : Sort v} → α → β → α ×' β","name":"PProd.mk"}]},{"type":"Type u → Type v → outParam (Type w) → Type (max (max u v) w)","name":"HAdd","kind":"inductive","ctors":[{"type":"{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → (α → β → γ) → HAdd α β γ","name":"HAdd.mk"}]},{"type":"Sort u","name":"PUnit","kind":"inductive","ctors":[{"type":"PUnit.{u}","name":"PUnit.unit"}]},{"type":"Type","name":"Nat","kind":"inductive","ctors":[{"type":"ℕ","name":"Nat.zero"},{"type":"ℕ → ℕ","name":"Nat.succ"}]},{"value":"{ add := Nat.add }","type":"Add ℕ","name":"instAddNat","kind":"definition"},{"type":"{α : Sort u_1} → α → α → Prop","name":"Eq","kind":"inductive","ctors":[{"type":"∀ {α : Sort u_1} (a : α), a = a","name":"Eq.refl"}]},{"value":"fun x x_1 =>\n  Nat.brecOn (motive := fun x => ℕ → ℕ) x_1\n    (fun x f x_2 =>\n      (match (motive := ℕ → (x : ℕ) → Nat.below (motive := fun x => ℕ → ℕ) x → ℕ) x_2, x with\n        | a, Nat.zero => fun x => a\n        | a, b.succ => fun x => (x.1 a).succ)\n        f)\n    x","type":"ℕ → ℕ → ℕ","name":"Nat.add","kind":"definition"},{"type":"Type u → Type u","name":"Add","kind":"inductive","ctors":[{"type":"{α : Type u} → (α → α → α) → Add α","name":"Add.mk"}]}]},"prettyProof":"Eq.refl (a + (b + c))","originalSource":"[source extraction not implemented]","mathlibVersion":"unknown (mathlib package not found in manifest)","leanVersion":"4.20.0-rc5","goal":"a + (b + c) = a + (b + c)","distractors":[],"context":["(a : ℕ)","(b : ℕ)","(c : ℕ)"]}
{"syntheticName":"add_assoc_example_goal_goal_7636146822633310737","sourceDecl":"add_assoc_example","proof":"Eq.mpr (id (congrArg (fun _a => _a = a + (b + c)) (Nat.add_assoc a b c))) (Eq.refl (a + (b + c)))","primitives":{"primitives":[{"value":"fun {α β} h b => ⋯ ▸ b","type":"{α β : Sort u} → α = β → β → α","name":"Eq.mpr","kind":"definition"},{"value":"fun α => α","type":"Sort u → Sort u","name":"outParam","kind":"definition"},{"type":"∀ {α : Sort u} {β : Sort v} {a₁ a₂ : α} (f : α → β), a₁ = a₂ → f a₁ = f a₂","name":"congrArg","kind":"theorem"},{"value":"fun {α} a => a","type":"{α : Sort u} → α → α","name":"id","kind":"definition"},{"value":"fun n => { ofNat := n }","type":"(n : ℕ) → OfNat ℕ n","name":"instOfNatNat","kind":"definition"},{"value":"fun {α} [Add α] => { hAdd := fun a b => Add.add a b }","type":"{α : Type u_1} → [Add α] → HAdd α α α","name":"instHAdd","kind":"definition"},{"type":"Sort u → Sort v → Sort (max (max 1 u) v)","name":"PProd","kind":"inductive","ctors":[{"type":"{α : Sort u} → {β : Sort v} → α → β → α ×' β","name":"PProd.mk"}]},{"type":"Type u → Type v → outParam (Type w) → Type (max (max u v) w)","name":"HAdd","kind":"inductive","ctors":[{"type":"{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → (α → β → γ) → HAdd α β γ","name":"HAdd.mk"}]},{"type":"Sort u","name":"PUnit","kind":"inductive","ctors":[{"type":"PUnit.{u}","name":"PUnit.unit"}]},{"type":"Type","name":"Nat","kind":"inductive","ctors":[{"type":"ℕ","name":"Nat.zero"},{"type":"ℕ → ℕ","name":"Nat.succ"}]},{"type":"∀ (n m k : ℕ), n + m + k = n + (m + k)","name":"Nat.add_assoc","kind":"theorem"},{"value":"{ add := Nat.add }","type":"Add ℕ","name":"instAddNat","kind":"definition"},{"type":"∀ {α : Sort u} {a b : α}, a = b → b = a","name":"Eq.symm","kind":"theorem"},{"type":"{α : Sort u_1} → α → α → Prop","name":"Eq","kind":"inductive","ctors":[{"type":"∀ {α : Sort u_1} (a : α), a = a","name":"Eq.refl"}]},{"value":"fun x x_1 =>\n  Nat.brecOn (motive := fun x => ℕ → ℕ) x_1\n    (fun x f x_2 =>\n      (match (motive := ℕ → (x : ℕ) → Nat.below (motive := fun x => ℕ → ℕ) x → ℕ) x_2, x with\n        | a, Nat.zero => fun x => a\n        | a, b.succ => fun x => (x.1 a).succ)\n        f)\n    x","type":"ℕ → ℕ → ℕ","name":"Nat.add","kind":"definition"},{"type":"Type u → Type u","name":"Add","kind":"inductive","ctors":[{"type":"{α : Type u} → (α → α → α) → Add α","name":"Add.mk"}]},{"value":"fun {α} {a} => Eq.refl a","type":"∀ {α : Sort u} {a : α}, a = a","name":"rfl","kind":"definition"},{"type":"Type u → ℕ → Type u","name":"OfNat","kind":"inductive","ctors":[{"type":"{α : Type u} → {x : ℕ} → α → OfNat α x","name":"OfNat.mk"}]}]},"prettyProof":"Eq.mpr (id (congrArg (fun _a => _a = a + (b + c)) (Nat.add_assoc a b c))) (Eq.refl (a + (b + c)))","originalSource":"[source extraction not implemented]","mathlibVersion":"unknown (mathlib package not found in manifest)","leanVersion":"4.20.0-rc5","goal":"a + b + c = a + (b + c)","distractors":[],"context":["(a : ℕ)","(b : ℕ)","(c : ℕ)"]}
